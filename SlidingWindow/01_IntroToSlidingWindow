Why Sliding window

for ex: wheever if a problem given given to ask you to find subarray of size k=3 and find its max sum:

Brute force : what we will do we traverse through the array two for loops and then we find it

[2,3,4,5,1]
subarrays of size 3 is 
[2,3,4]= 9
[3,4,5]=12
[4,5,1]=10 
return 12
In the above example if you see 2+3+4 ==> 9 and again we are using prev 3+4+5 ==> 12 
so here comes to the repetitve work to avoid that we are using sliding window 
how we do this
will remove one element from start and one elment from end

Brute force
class Solution{
    static long maximumSumSubarray(int K, ArrayList<Integer> Arr,int N){
        // code here
        int max=0;
        for(int i=0;i<Arr.size();i++){
            int count=1,sum=0;
            for(int j=i;j<Arr.size();j++){
                if(i<=j&&count<=K){
                    sum+=Arr.get(j);
                    count++;
                }
                 max=Math.max(max,sum);
            }
        }
        return max;
    }
}


How to identify :
arr or string +subarray/substring + window size or condition ==> window size means fixed sliding window else varible
window size --> based on some condition return min or max subarray 
[Max Sum Subarray of size K)](https://www.geeksforgeeks.org/problems/max-sum-subarray-of-size-k5313/1)


class Solution{
    static long maximumSumSubarray(int K, ArrayList<Integer> Arr,int N){
        // code here
        long max=0,sum=0;
        int i=0,j=0;
        while(j<Arr.size()){
            sum+=Arr.get(j);//summing values 
            if(j-i+1<K)
            j++;
            else if(j-i+1==K){//checking wheen its equal k 
                max=Math.max(max,sum);// getting max
                sum=sum-Arr.get(i);//removing start value
                i++;
                j++;
                //i++,j++ moving the window;
            }
            
        }
        
        return max;
    }
}
We have two types of sliding window:
1. Fixed
2. Variable
-------------------------
Fixed Size Sliding Window 
--------------------------
 How to identify the pattern in the question there will be substring/subarray with given size K 
//Pattern
int i=0,j=0;
while(j<nums.length){
//calucation
if(j-i+1<k)j++;
if(j-i+1==k){
//removing the one adding another
i++;
j++;
//moving the window
}
Q1. Maximum Sum Subarray of size K
Q2. First -ve number in every window of size k
Q3. Cout Occurences of Anagrams
Q4. Maximum of all subarrays of size K

--------------------------
#varibale silidig window
int i=0,j=0;
while(j<nums.length){
//caluculation we can use based on the caluculation or question either list or map whatever
if(j-i+1<K) j++;
else if(j-i+1==K){
max=Math.max(max,sum or j-i+1);
j++;
}
else if(j-i+1>k){
while(j-i+1>k){
//calucuation
i++
}
j++;
}
}
Q1. Largest Subarray of sum K
Q2. Longest Substring with K unique characters
Q3. Longest substring without repeating character (means all unique characters)
Q4. Pick toys
Q5. Minimum window substring
 

